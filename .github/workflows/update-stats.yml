name: Update Garmin stats.json

on:
  schedule:
    - cron: "0 13 * * *"  # 13:00 UTC ~ 9:00 AM ET during DST
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: "update-stats"
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install garminconnect

      # Restore tokens from secrets if provided (supports either 2-file or 1-archive approach)
      - name: Restore Garmin tokens
        env:
          OAUTH1_B64: ${{ secrets.GARMIN_OAUTH1_B64 }}   # optional
          OAUTH2_B64: ${{ secrets.GARMIN_OAUTH2_B64 }}   # optional
          TOKENS_B64: ${{ secrets.GARMIN_TOKENS_B64 }}   # optional (tgz/zip)
        run: |
          set -euo pipefail
          mkdir -p ~/.garminconnect

          if [ -n "${OAUTH1_B64:-}" ] || [ -n "${OAUTH2_B64:-}" ]; then
            # Two-secrets path
            if [ -n "${OAUTH1_B64:-}" ]; then
              echo "$OAUTH1_B64" | base64 -d > ~/.garminconnect/oauth1_token.json
            fi
            if [ -n "${OAUTH2_B64:-}" ]; then
              echo "$OAUTH2_B64" | base64 -d > ~/.garminconnect/oauth2_token.json
            fi
            echo "Restored individual oauth token files."
          elif [ -n "${TOKENS_B64:-}" ]; then
            # Single-archive path (auto-detect tgz vs zip)
            echo "$TOKENS_B64" | base64 -d > /tmp/garmin_tokens.blob
            if tar -tzf /tmp/garmin_tokens.blob >/dev/null 2>&1; then
              tar -xzf /tmp/garmin_tokens.blob -C ~/.garminconnect
              echo "Extracted tokens from tgz."
            else
              sudo apt-get update -y >/dev/null
              sudo apt-get install -y unzip >/dev/null
              unzip -o /tmp/garmin_tokens.blob -d ~/.garminconnect
              echo "Extracted tokens from zip."
            fi
          else
            echo "No token secrets provided; relying on email/password (may fail if MFA/risk checks)."
          fi

          ls -la ~/.garminconnect || true

      - name: Generate stats.json
        env:
          GARMIN_OUT: public/stats.json
          # Optional fallback if you have NO MFA (will likely fail otherwise):
          GARMIN_EMAIL: ${{ secrets.GARMIN_EMAIL }}
          GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
        run: |
          set -euo pipefail
          python scripts/update_stats.py

      - name: Commit & push changes
        run: |
          set -euo pipefail
          if [[ -n "$(git status --porcelain public/stats.json)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add public/stats.json
            git commit -m "chore(stats): daily refresh"
            git push
          else
            echo "No changes to commit."
          fi
